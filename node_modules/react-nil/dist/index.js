"use strict";
var _a;
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const React = require("react");
const Reconciler = require("react-reconciler");
const constants_js = require("react-reconciler/constants.js");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespace(React);
const Reconciler__default = /* @__PURE__ */ _interopDefaultLegacy(Reconciler);
const REACT_INTERNAL_PROPS = ["ref", "key", "children"];
function getInstanceProps(props) {
  const instanceProps = {};
  for (const key in props) {
    if (!REACT_INTERNAL_PROPS.includes(key))
      instanceProps[key] = props[key];
  }
  return instanceProps;
}
const reconciler = Reconciler__default.default({
  isPrimaryRenderer: false,
  supportsMutation: true,
  supportsPersistence: false,
  supportsHydration: false,
  now: Date.now,
  scheduleTimeout: setTimeout,
  cancelTimeout: clearTimeout,
  noTimeout: -1,
  createInstance: (type, props) => ({ type, props: getInstanceProps(props), children: [] }),
  hideInstance() {
  },
  unhideInstance() {
  },
  createTextInstance: (value) => ({ type: "text", props: { value }, children: [] }),
  hideTextInstance() {
  },
  unhideTextInstance() {
  },
  appendInitialChild: (parent, child) => parent.children.push(child),
  appendChild: (parent, child) => parent.children.push(child),
  appendChildToContainer: (container2, child) => container2.head = child,
  insertBefore: (parent, child, beforeChild) => parent.children.splice(parent.children.indexOf(beforeChild), 0, child),
  removeChild: (parent, child) => parent.children.splice(parent.children.indexOf(child), 1),
  removeChildFromContainer: (container2) => container2.head = null,
  getPublicInstance: () => null,
  getRootHostContext: () => null,
  getChildHostContext: () => null,
  shouldSetTextContent: () => false,
  finalizeInitialChildren: () => false,
  prepareUpdate: () => ({}),
  commitUpdate: (instance, _, __, ___, props) => instance.props = getInstanceProps(props),
  commitTextUpdate: (instance, _, value) => instance.props.value = value,
  prepareForCommit: () => null,
  resetAfterCommit() {
  },
  preparePortalMount() {
  },
  clearContainer: (container2) => container2.head = null,
  getCurrentEventPriority: () => constants_js.DefaultEventPriority,
  beforeActiveInstanceBlur: () => {
  },
  afterActiveInstanceBlur: () => {
  },
  detachDeletedInstance: () => {
  }
});
const isProd = typeof process === "undefined" || ((_a = process.env) == null ? void 0 : _a["NODE_ENV"]) === "production";
reconciler.injectIntoDevTools({
  findFiberByHostInstance: () => null,
  bundleType: isProd ? 0 : 1,
  version: React__namespace.version,
  rendererPackageName: "react-nil"
});
const container = { head: null };
const root = reconciler.createContainer(container, constants_js.ConcurrentRoot, null, false, null, "", console.error, null);
function render(element) {
  reconciler.updateContainer(element, root, null, void 0);
  return container;
}
function createPortal(element, container2) {
  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, reconciler.createPortal(element, container2, null, null));
}
const act = React__namespace.unstable_act;
exports.act = act;
exports.createPortal = createPortal;
exports.render = render;
//# sourceMappingURL=index.js.map
